  Graph.cpp
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54): error C2678: 二进制“<”: 没有找到接受“const _Ty”类型的左操作数的运算符(或没有可接受的转换)
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54): error C2678:         with
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54): error C2678:         [
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54): error C2678:             _Ty=Path
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54): error C2678:         ]
  (编译源文件“Graph.cpp”)
      E:\数据结构课程设计\Problem3\Graph.h(20,10):
      可能是“bool Path::operator <(const Path &)”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool Path::operator <(const Path &)”: 不能将“this”指针从“const _Ty”转换为“Path &”
          with
          [
              _Ty=Path
          ]
              D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
              转换丢失限定符
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\stack(178,17):
      或    “bool std::operator <(const std::stack<_Ty,_Container> &,const std::stack<_Ty,_Container> &)”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::stack<_Ty,_Container> &,const std::stack<_Ty,_Container> &)”: 无法从“const _Ty”推导出“const std::stack<_Ty,_Container> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\queue(187,17):
      或    “bool std::operator <(const std::queue<_Ty,_Container> &,const std::queue<_Ty,_Container> &)”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::queue<_Ty,_Container> &,const std::queue<_Ty,_Container> &)”: 无法从“const _Ty”推导出“const std::queue<_Ty,_Container> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\deque(1809,17):
      或    “bool std::operator <(const std::deque<_Ty,_Alloc> &,const std::deque<_Ty,_Alloc> &)”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::deque<_Ty,_Alloc> &,const std::deque<_Ty,_Alloc> &)”: 无法从“const _Ty”推导出“const std::deque<_Ty,_Alloc> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\vector(2314,30):
      或    “bool std::operator <(const std::vector<_Ty,_Alloc> &,const std::vector<_Ty,_Alloc> &)”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::vector<_Ty,_Alloc> &,const std::vector<_Ty,_Alloc> &)”: 无法从“const _Ty”推导出“const std::vector<_Ty,_Alloc> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\memory(3709,30):
      或    “bool std::operator <(std::nullptr_t,const std::unique_ptr<_Ty,_Dx> &)”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(std::nullptr_t,const std::unique_ptr<_Ty,_Dx> &)”: 无法从“const _Ty”推导出“const std::unique_ptr<_Ty,_Dx> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\memory(3703,30):
      或    “bool std::operator <(const std::unique_ptr<_Ty,_Dx> &,std::nullptr_t)”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::unique_ptr<_Ty,_Dx> &,std::nullptr_t)”: 无法从“const _Ty”推导出“const std::unique_ptr<_Ty,_Dx> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\memory(3645,17):
      或    “bool std::operator <(const std::unique_ptr<_Ty,_Dx> &,const std::unique_ptr<_Ty2,_Dx2> &)”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::unique_ptr<_Ty,_Dx> &,const std::unique_ptr<_Ty2,_Dx2> &)”: 无法从“const _Ty”推导出“const std::unique_ptr<_Ty,_Dx> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\memory(1943,17):
      或    “bool std::operator <(std::nullptr_t,const std::shared_ptr<_Ty> &) noexcept”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(std::nullptr_t,const std::shared_ptr<_Ty> &) noexcept”: 无法从“const _Ty”推导出“const std::shared_ptr<_Ty> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\memory(1938,17):
      或    “bool std::operator <(const std::shared_ptr<_Ty> &,std::nullptr_t) noexcept”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::shared_ptr<_Ty> &,std::nullptr_t) noexcept”: 无法从“const _Ty”推导出“const std::shared_ptr<_Ty> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\memory(1891,17):
      或    “bool std::operator <(const std::shared_ptr<_Ty> &,const std::shared_ptr<_Ty0> &) noexcept”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::shared_ptr<_Ty> &,const std::shared_ptr<_Ty0> &) noexcept”: 无法从“const _Ty”推导出“const std::shared_ptr<_Ty> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring(3294,17):
      或    “bool std::operator <(const std::basic_string<_Elem,_Traits,_Alloc> &,const _Elem *const ) noexcept”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::basic_string<_Elem,_Traits,_Alloc> &,const _Elem *const ) noexcept”: 无法从“const _Ty”推导出“const std::basic_string<_Elem,_Traits,_Alloc> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring(3288,17):
      或    “bool std::operator <(const _Elem *const ,const std::basic_string<_Elem,_Traits,_Alloc> &) noexcept”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const _Elem *const ,const std::basic_string<_Elem,_Traits,_Alloc> &) noexcept”: 无法从“const _Ty”推导出“const _Elem *const ”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xstring(3282,17):
      或    “bool std::operator <(const std::basic_string<_Elem,_Traits,_Alloc> &,const std::basic_string<_Elem,_Traits,_Alloc> &) noexcept”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::basic_string<_Elem,_Traits,_Alloc> &,const std::basic_string<_Elem,_Traits,_Alloc> &) noexcept”: 无法从“const _Ty”推导出“const std::basic_string<_Elem,_Traits,_Alloc> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xutility(4396,5):
      或    “bool std::operator <(const std::move_iterator<_Iter> &,const std::move_iterator<_Iter2> &) noexcept(<expr>)”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::move_iterator<_Iter> &,const std::move_iterator<_Iter2> &) noexcept(<expr>)”: 无法从“const _Ty”推导出“const std::move_iterator<_Iter> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\xutility(1852,5):
      或    “bool std::operator <(const std::reverse_iterator<_BidIt> &,const std::reverse_iterator<_BidIt2> &) noexcept(<expr>)”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::reverse_iterator<_BidIt> &,const std::reverse_iterator<_BidIt2> &) noexcept(<expr>)”: 无法从“const _Ty”推导出“const std::reverse_iterator<_BidIt> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\utility(504,27):
      或    “bool std::operator <(const std::pair<_Ty1,_Ty2> &,const std::pair<_Uty1,_Uty2> &)”
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
          “bool std::operator <(const std::pair<_Ty1,_Ty2> &,const std::pair<_Uty1,_Uty2> &)”: 无法从“const _Ty”推导出“const std::pair<_Ty1,_Ty2> &”的 模板 参数
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
      尝试匹配参数列表“(const _Ty, const _Ty)”时
          with
          [
              _Ty=Path
          ]
      D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\type_traits(2419,54):
      模板实例化上下文(最早的实例化上下文)为
          E:\数据结构课程设计\Problem3\Graph.cpp(400,26):
          查看对正在编译的 类 模板 实例化“std::priority_queue<Path,std::vector<Path,std::allocator<Path>>,std::less<_Ty>>”的引用
          with
          [
              _Ty=Path
          ]
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\queue(374,10):
          在编译 类 模板 成员函数“void std::priority_queue<Path,std::vector<Path,std::allocator<Path>>,std::less<_Ty>>::push(Path &&)”时
          with
          [
              _Ty=Path
          ]
              E:\数据结构课程设计\Problem3\Graph.cpp(401,12):
              请参阅 "Graph::findKthShortestPath" 中对 "std::priority_queue<Path,std::vector<Path,std::allocator<Path>>,std::less<_Ty>>::push" 的第一个引用
          with
          [
              _Ty=Path
          ]
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\queue(376,14):
          查看对正在编译的函数 模板 实例化“void std::push_heap<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>,_Fn>(_RanIt,_RanIt,_Pr)”的引用
          with
          [
              _Ty=Path,
              _Fn=std::less<Path>,
              _RanIt=std::_Vector_iterator<std::_Vector_val<std::_Simple_types<Path>>>,
              _Pr=std::less<Path>
          ]
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\algorithm(6669,14):
          查看对正在编译的函数 模板 实例化“void std::_Push_heap_by_index<Path*,Path,_Fn>(_RanIt,__int64,__int64,_Ty &&,_Pr)”的引用
          with
          [
              _Fn=std::less<Path>,
              _RanIt=Path *,
              _Ty=Path,
              _Pr=std::less<Path>
          ]
          D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.41.34120\include\algorithm(6650,26):
          查看对正在编译的函数 模板 实例化“bool std::_Debug_lt_pred<_Pr&,Path&,_Ty&>(std::less<_Ty>&,_Ty1,_Ty2) noexcept(<expr>)”的引用
          with
          [
              _Pr=std::less<Path>,
              _Ty=Path,
              _Ty1=Path &,
              _Ty2=Path &
          ]
  
